@page "/blossom_MVP"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@inject IPlantService PlantService

<!--***********************************************************************
*	                             CSS/STYLING SECTION                      *
************************************************************************-->
<style type="text/css">
    /* Styling for the green box                                         */
    /*********************************************************************/
    .main {
        margin: 50px auto;
        width: 700px; 
        padding-top: 10px;
        padding-bottom: 10px;
        background-color: #725D4C;
        border-radius: 20px;
        box-shadow: 10px 10px 8px #888888;
    }

    /* Inner Container for the grid */
    .main .inner {
        display: flex;
        flex-wrap: wrap; /* Allows items to wrap to the next line */
        justify-content: center; /* Centers items horizontally */
        gap: 20px; /* Space between tiles */
        padding: 10px;
    }
    
  /* Delete button as a shovel icon in the top-left corner of the tile */
    .delete-button {
        position: absolute;
        top: 10px;
        right: 10px; /* Changed from left to right */
        width: 30px;
        height: 30px;
        background: url('/images/shovel-icon.png') no-repeat center center;
        background-size: contain;
        border: none;
        cursor: pointer;
        outline: none;
    }

    .delete-button:hover {
        opacity: 0.8;
    }

    /*********************************************************************/
    /* Container for all tiles */
    .tiles-container {
        display: flex;
        flex-wrap: wrap; /* Allows tiles to wrap onto new rows */
        justify-content: center; /* Centers tiles on the page */
        gap: 50px; /* Space between tiles */
        padding: 30px; /* Optional padding around the container */
    }

    /* Styling for individual tiles */
    .tile {
        height: 225px;
        width: 400px; /* Adjust width as needed */
        border: 20px solid #725D4C;
        background-color: #48BF53;
        display: inline-block;
        position: relative;
        border-radius: 20px;
        box-shadow: 10px 10px 8px #888888;
        padding: 10px;
    }

    /* Styling for the plant name - targets spans inside the tiles       */
    /*********************************************************************/
    .tile span {
        position: absolute;
        top: 15%;
        left: 200px;
        color: white;
        font-size: 18px;
        font-family: Arial, sans-serif;
    }

    /* Styling for formatting checkbox - targets checkbox input          */
    /*********************************************************************/
    .tile input[type="checkbox"] {
        position: absolute;
        top: 60%;  
        left: 25px; 
    }

    /* Styling for the checkbox label - targets labels                   */
    /*********************************************************************/
    .tile label {
        position: absolute;
        top: 58%;        
        left: 40px;       
        color: black;
        font-family: Arial, sans-serif;
        font-size: 14px;
    }
</style>

<!--***********************************************************************
*	                             HTML SECTION                             *
************************************************************************-->
<PageTitle>MVP</PageTitle>

<h1>Blossom MVP</h1>
<AddPlantButton/>

<!-- Main content block for displaing the tile grid -->
<div class="tiles-container">
    @if (plant == null || !plant.Any())
    {
        <p>No plants available</p>
    }
    else
    {
        @foreach (var p in plant)
        {
            
            @if (p.IS_PRIVATE == "Y")
            {
            <div class="tile">
                <!-- Shovel delete button in the top-right corner -->
                <button @onclick="() => func(p.PLANT_ID)" class="delete-button"></button>

                <span>@p.PLANT_NAME</span>

                @if (p.IMAGE_DATA != null && p.IMAGE_DATA.Length > 0)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(p.IMAGE_DATA)" 
                         alt="@p.PLANT_NAME" 
                         style="width: 75px; height: 80px; border-radius: 10px; margin-top: 0px;" />
                }

                <!-- Pull the list instead of hardcoding a water check-box -->
                <!-- <input type="checkbox" id="watering-@p.PLANT_ID" name="watering-@p.PLANT_ID"> -->
                <!-- <label for="watering-@p.PLANT_ID">Watering</label> -->

                @if (@p.WATER_FREQ != 0)
                {
                    <input type="checkbox" id="watering-@p.PLANT_ID" name="watering-@p.PLANT_ID">
                    <label for="watering-@p.PLANT_ID">Watering</label>
                    <div>
                        @if (@p.WATER_FREQ == 1)
                        {
                            <div>Water @p.WATER_FREQ time a day.</div>    
                        }
                    </div>
                    <div>
                        @if (@p.WATER_FREQ > 1)
                        {
                            <div>Water @p.WATER_FREQ times a day.</div>    
                        }
                    </div>
                }
            </div>
            }
        }
    }
</div>

<!--***********************************************************************
*	                             CODE SECTION                             *
************************************************************************-->
@code {
    List<Plants>? plant = null;

    protected override async Task OnInitializedAsync()
    {
        plant = await PlantService.GetAllPlants();
    }

    async Task func(int PLANT_ID)
    {
        await PlantService.DeletePlant(PLANT_ID);
        plant = await PlantService.GetAllPlants();
    }

}