@page "/add-plants"
@page "/add-plants/{PLANT_ID:int}"
@inject IPlantService PlantService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<!--***********************************************************************
*	                             CSS/STYLING SECTION                      *
************************************************************************-->
<style>
    /* General Page Styling */
    body {
        font-family: 'Arial', sans-serif;
        color: #2F4F4F;
        justify-content: center;
    }

    h3 {
        font-size: 24px;
        color: #2C6E49;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'Georgia', serif;
    }

    /* Buttons */
    button.btn {
        background-color: #6BBF59; /* Leafy green */
        color: #FFFFFF;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 16px;
        margin: 10px 5px;
        cursor: pointer;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
    }

        button.btn:hover {
            background-color: #5AA74E;
        }

    /* Form Styling */
    form {
        display: flex;
        flex-direction: column;
        background-color: #FFFFFF;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        margin: 20px auto;
        border: 1px solid #C6E2C6; /* Light green border */
    }

    label {
        font-size: 14px;
        color: #4F7942;
        margin-top: 10px;
    }

    input[type="text"],
    select {
        padding: 10px;
        border: 1px solid #A0D3A1;
        border-radius: 8px;
        font-size: 14px;
        margin-top: 5px;
        margin-bottom: 15px;
        color: #4F7942;
        background-color: #F8FFF8; /* Very light green */
    }

        input[type="text"]:focus,
        select:focus {
            outline: none;
            border-color: #6BBF59;
            box-shadow: 0px 0px 5px rgba(107, 191, 89, 0.4);
        }

    input[type="file"] {
        margin-top: 10px;
        padding: 8px;
        background-color: #F0F5F0; /* Light greenish background for file input */
        color: #4F7942;
        border: 1px solid #A0D3A1;
        border-radius: 8px;
    }

    /* Custom Form Buttons */
    button[type="submit"] {
        background-color: #6BBF59; /* Matching the Create button with a natural green */
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 16px;
        margin-top: 10px;
        cursor: pointer;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
    }

        button[type="submit"]:hover {
            background-color: #5AA74E;
        }

    /* Additional Styles */
    .container {
        max-width: 700px;
        margin: 0 auto;
    }
</style>

<!--***********************************************************************
*	                             HTML SECTION                             *
************************************************************************-->
<h3>Create Plant</h3>
<button @onclick="ShowCustomForm" class="btn btn-secondary">Create Custom Plant</button>
<button @onclick="ShowPrefilledForm" class="btn btn-secondary">Create Prefilled Plant</button>

@if (showCustomForm)
{
    <!-- Form to create or edit a plant -->
    <EditForm Model="plant" OnSubmit="HandleSubmit" FormName="editPlant">
        <!-- Input field for plant name-->
        <label>Plant Name</label>
        <InputText @bind-Value="plant.PLANT_NAME">@plant.PLANT_NAME</InputText>

        <!-- File input for uploading an image of the plant -->
        <label>Upload Image</label>
        <InputFile OnChange="HandleFileSelected" />
        S
        <!-- Submit button to save the plant details -->
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
else if (showPrefilledForm)
{
    <EditForm Model="plant" OnSubmit="HandleSubmit" FormName="editPlant">
        <!-- Dropdown to select a public plant -->
        <label>Select a Public Plant</label>
        <InputSelect @bind-Value="selectedPublicPlantId">
            <option value="">-- Select a public plant --</option>
            @if (publicPlants != null)
            {
                @foreach (var publicPlant in publicPlants)
                {
                    <option value="@publicPlant.PLANT_ID">@publicPlant.PLANT_NAME</option>
                }
            }
        </InputSelect>
        <!-- Submit button to save the plant details -->
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

<!--***********************************************************************
*	                             CODE SECTION                             *
************************************************************************-->
@code {
    [Parameter]
    public int? PLANT_ID { get; set; }
    private int? selectedPublicPlantId;
    List<Plants>? publicPlants = null;
    public bool is_checked;
    private bool showCustomForm = false;
    private bool showPrefilledForm = false;

    [SupplyParameterFromForm]
    Plants plant { get; set; } = new Plants { PLANT_NAME = string.Empty };

    private IBrowserFile? selectedFile;
    private const long MaxFileSize = 2 * 1024 * 1024;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            using var memoryStream = new MemoryStream();
            await selectedFile.OpenReadStream().CopyToAsync(memoryStream);
            plant.IMAGE_DATA = memoryStream.ToArray();
        }
    }

    async Task HandleSubmit()
    {
        Console.WriteLine("The ID:", selectedPublicPlantId);

        if (selectedPublicPlantId.HasValue)
        {
            var selectedPlant = publicPlants?.FirstOrDefault(p => p.PLANT_ID == selectedPublicPlantId.Value);
            if (selectedPlant != null)
            {
                plant.PLANT_NAME = selectedPlant.PLANT_NAME;
            }
        }

        await PlantService.AddPlants(plant);
        NavigationManager.NavigateTo("/blossom_MVP");
    }

    protected override async Task OnInitializedAsync()
    {
        publicPlants = await PlantService.GetAllPublicPlants();
    }

    private void ShowCustomForm()
    {
        showCustomForm = true;
        showPrefilledForm = false;
    }

    private void ShowPrefilledForm()
    {
        showCustomForm = false;
        showPrefilledForm = true;
    }
}

