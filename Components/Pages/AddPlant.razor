@page "/add-plants"
@page "/add-plants/{PLANT_ID:int}"
@inject IPlantService PlantService
@inject IUserServices UserServices
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using greenhouse.Data
@inject AuthenticationStateProvider AuthenticationStateProvider

@using greenhouse.Entities;
@using Microsoft.EntityFrameworkCore;

<!--***********************************************************************
*	                             CSS/STYLING SECTION                      *
************************************************************************-->
<style>

    /* Body styling - sets font and text color */
    body {
    font-family: 'Arial', sans-serif;
    color: #2F4F4F;
    justify-content: center;
    }

    /* Header styling - font size and color */
    h3 {
    font-size: 24px;
    color: #2C6E49;
    text-align: center;
    margin-bottom: 20px;
    font-family: 'Georgia', serif;
    }

    /* Button styling - main style */
    button.btn {
    background-color: #6BBF59;
    color: #FFFFFF;
    border: none;
    padding: 12px 20px;
    border-radius: 25px;
    font-size: 16px;
    margin: 10px 5px;
    cursor: pointer;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
    }

    /* Button hover effect */
    button.btn:hover {
    background-color: #5AA74E;
    }

    /* Form container styling */
    form {
    display: flex;
    flex-direction: column;
    background-color: #FFFFFF;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.1);
    max-width: 750px;
    margin: 20px auto;
    border: 1px solid #C6E2C6;
    }

    /* Label styling - font size and color */
    label {
    font-size: 14px;
    color: #4F7942;
    margin-top: 10px;
    }

    /* Text input and select styling */
    input[type="text"],
    select {
    padding: 10px;
    border: 1px solid #A0D3A1;
    border-radius: 8px;
    font-size: 14px;
    margin-top: 5px;
    margin-bottom: 15px;
    color: #4F7942;
    background-color: #F8FFF8;
    }

    /* Focus effect on text input and select */
    input[type="text"]:focus, select:focus {
    outline: none;
    border-color: #6BBF59;
    box-shadow: 0px 0px 5px rgba(107, 191, 89, 0.4);
    }

    /* File input styling */
    input[type="file"] {
    margin-top: 10px;
    padding: 8px;
    background-color: #F0F5F0;
    color: #4F7942;
    border: 1px solid #A0D3A1;
    border-radius: 8px;
    }

    /* Submit button styling */
    button[type="submit"] {
    background-color: #6BBF59;
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 25px;
    font-size: 16px;
    margin-top: 10px;
    cursor: pointer;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
    }

    /* Submit button hover effect */
    button[type="submit"]:hover {
    background-color: #5AA74E;
    }

    .button-container {
    display: flex;
    justify-content: center; /* Centers the buttons horizontally */
    gap: 30px; /* Adds more spacing between the buttons */
    margin-top: 20px; /* Adds some space above the buttons */
    }

    h3 {
    font-size: 36px; /* Increase the font size to make the text bigger */
    color: #2C6E49;
    text-align: center;
    margin-bottom: 20px;
    font-family: 'Georgia', serif;
    }

    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 55px;  /*60*/
        height: 28px; /*34*/
    }

    /* Hide default HTML checkbox */
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #a1a1a1; /* light grey standard */
        -webkit-transition: .4s;
        transition: .4s;
    }

   .slider:before {
        position: absolute;
        content: "";
        height: 20px; /*26*/
        width: 20px;  /*26*/
        left: 4px;
        bottom: 4px;
            background-color: #2C6E49; /* dark green stnadard */
        -webkit-transition: .4s;
        transition: .4s;
    }

    input:checked + .slider {
        background-color: #6BBF59; /* light green standard */
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>

<!--***********************************************************************
*	                             HTML SECTION                             *
************************************************************************-->
<!-- Page Title -->
<h3>Create Plant</h3>

<!-- Buttons to choose between creating a custom plant or using a prefilled plant -->
<div class="button-container">
    <button @onclick="ShowCustomForm" class="btn btn-secondary">Create Custom Plant</button>
    <button @onclick="ShowPrefilledForm" class="btn btn-secondary">Create Prefilled Plant</button>
</div>

<!-- Display the form for creating a custom plant -->
@if (showCustomForm)
{
    <EditForm Model="plant" OnSubmit="HandleSubmit" FormName="editPlant">

        <!-- Input field for plant name -->
        <label>Plant Name</label>
        <InputText @bind-Value="plant.PLANT_NAME"></InputText>

        <!-- Input field for image upload -->
        <label>Upload Image</label>
        <InputFile OnChange="HandleFileSelected" />

        <!-- Dropdown list for avalible plants -->
        <label>Select a Plant</label>
        <PlantDropdown />
      
        <h4>Task Frequencies</h4>

        <!-- Input fields for task frequencies (days per week) -->
        <label>Watering Frequency (days per week)</label>
        <InputNumber @bind-Value="waterFreq"></InputNumber>

        <label>Weeding Frequency (days per week)</label>
        <InputNumber @bind-Value="weedFreq"></InputNumber>

        <label>Pruning Frequency (days per week)</label>
        <InputNumber @bind-Value="pruneFreq"></InputNumber>

        <label>Pest Control Frequency (days per week)</label>
        <InputNumber @bind-Value="pestFreq"></InputNumber>


        <!-- Submit button to save the plant details -->
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
// Display the form for selecting a prefilled plant 
else if (showPrefilledForm) 
{
    <EditForm Model="plant" OnSubmit="PrefillHandleSubmit" FormName="editPlant">

        <!-- Dropdown to select an existing public plant -->
        <label>Select a Public Plant</label>
        <InputSelect @bind-Value="selectedPublicPlantId">
            <option value="">-- Select a public plant --</option>
            @if (publicPlants != null)
            {
                @foreach (var publicPlant in publicPlants)
                {
                    <option value="@publicPlant.PLANT_ID">@publicPlant.PLANT_NAME</option>
                }
            }
        </InputSelect>

        <!-- Buttons to submit or edit the selected plant -->
        <button type="submit" class="btn btn-primary">Submit</button>
        <button type="button" class="btn btn-secondary" @onclick="EditSelectedPlant">Edit</button>
    </EditForm>
}

<!--***********************************************************************
*	                             CODE SECTION                             *
************************************************************************-->
@code {
    [Parameter]
    public EventCallback OnSubmit { get; set; } // Notify parent when submitting

    public int?   PLANT_ID { get; set; }        // Plant ID from route parameter
    private int?  selectedPublicPlantId;        // ID of selected public plant
    List<Plants>? publicPlants = null;          // List of public plants
    private bool  showCustomForm = false;       // Show custom plant form
    private bool  showPrefilledForm = false;    // Show prefilled plant form

    // Task frequencies (instead of storing in Plants entity)
    private int   waterFreq;
    private int   weedFreq;
    private int   pruneFreq;
    private int   pestFreq;

    // Plant model
    Plants plant { get; set; } = new Plants { PLANT_NAME = string.Empty };

    private IBrowserFile? selectedFile;               // Stores the selected file for upload
    private const long MaxFileSize = 2 * 1024 * 1024; // Maximum file size (2MB)

    private AuthenticationState? authState;           // Holds authentication state
    private ClaimsPrincipal? user;                    // Stores user information
    private string? user_email;                       // Stores the user's email

    // ******************************************************************************
    // Fetch public plants and get user details
    // ******************************************************************************
    protected override async Task OnInitializedAsync()
    {
        publicPlants = await PlantService.GetAllPublicPlants();
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        user_email = user.Identity.Name;
    }

    // ******************************************************************************
    // Handle image upload
    // ******************************************************************************
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            using var memoryStream = new MemoryStream();
            await selectedFile.OpenReadStream().CopyToAsync(memoryStream);
            plant.IMAGE_DATA = memoryStream.ToArray();
        }
    }

    // ******************************************************************************
    // Handles the submission of a new plant, either as a pre-filled copy of an existing plant
    // or as a custom user-created plant. If a pre-filled plant is selected, it clones the
    // existing plant and its associated tasks. Otherwise, it creates a new custom plant.
    // ******************************************************************************
    async Task HandleSubmit()
    {
        // Get the user's unique ID
        plant.USER_ID = await UserServices.GetUserID(user_email);

        // Check if the plant is an edit (already exists)
        if (PLANT_ID.HasValue && PLANT_ID > 0)
        {
            var existingPlant = await PlantService.GetPlantByID(PLANT_ID.Value);
            if (existingPlant != null)
            {
                // Update the existing plant's name & image with the new value & image
                existingPlant.PLANT_NAME = plant.PLANT_NAME;
                existingPlant.IMAGE_DATA = plant.IMAGE_DATA;

                // Update plant in database
                await PlantService.UpdatePlant(existingPlant);

                // Retrieve existing tasks
                var existingTasks = await PlantService.GetTasksForPlant(existingPlant.PLANT_ID);

                // Iterate through all existing tasks linked to the plant
                foreach (var task in existingTasks)
                {
                    // Update the task's frequency based on the user-input values
                    switch (task.TASK_NAME)
                    {
                        case "Watering":
                            task.FREQ = waterFreq;
                            break;
                        case "Weeding":
                            task.FREQ = weedFreq;
                            break;
                        case "Pruning":
                            task.FREQ = pruneFreq;
                            break;
                        case "Pest Control":
                            task.FREQ = pestFreq;
                            break;
                    }
                    // Save the updated task back to the database
                    await PlantService.UpdateTask(task);
                }
            }
        }
        else
        {
            // Create a new plant
            var addedPlant = await PlantService.AddPlants(plant);

            if (addedPlant != null)
            {
                // Define tasks based on user input for frequency
                var taskList = new List<PlantTask>
                {
                new PlantTask { PLANT_ID = addedPlant.PLANT_ID, TASK_NAME = "Watering", FREQ = waterFreq },
                new PlantTask { PLANT_ID = addedPlant.PLANT_ID, TASK_NAME = "Weeding", FREQ = weedFreq },
                new PlantTask { PLANT_ID = addedPlant.PLANT_ID, TASK_NAME = "Pruning", FREQ = pruneFreq },
                new PlantTask { PLANT_ID = addedPlant.PLANT_ID, TASK_NAME = "Pest Control", FREQ = pestFreq }
                };

                foreach (var task in taskList)
                {
                    // Only save tasks that have a valid frequency
                    await PlantService.AddTask(task);
                }
            }
        }
        // Notify the parent component that the submission is complete
        await OnSubmit.InvokeAsync();
        // Navigate back to the garden page and refresh the data
        NavigationManager.NavigateTo("/Garden", forceLoad: true);
    }

    //**********************************************************************************************/
    async Task PrefillHandleSubmit()
    {
        // Get the user's unique ID
        plant.USER_ID = await UserServices.GetUserID(user_email);

        // Check if the user selected a pre-filled plant
        if (selectedPublicPlantId.HasValue)
        {
            // Retrieve the original plant from the database
            var originalPlant = await PlantService.GetPlantByID(selectedPublicPlantId.Value);
            if (originalPlant != null)
            {
                // Create a new plant based on the original, but assign it to the current user
                plant = new Plants
                    {
                        PLANT_NAME = originalPlant.PLANT_NAME,
                        IMAGE_DATA = originalPlant.IMAGE_DATA,
                        USER_ID = await UserServices.GetUserID(user_email),
                        IS_PRIVATE = "Y"
                    };

                // Save the new plant to the database
                var newPlant = await PlantService.AddPlants(plant);

                if (newPlant != null)
                {
                    // Retrieve the original plant's tasks
                    var originalTasks = await PlantService.GetTasksForPlant(originalPlant.PLANT_ID);
                    foreach (var task in originalTasks)
                    {
                        // Create a new task linked to the newly created plant
                        var newTask = new PlantTask
                            {
                                PLANT_ID = newPlant.PLANT_ID, // Assign the new plant's ID
                                TASK_NAME = task.TASK_NAME,
                                FREQ = task.FREQ,
                                DAYS_UNTIL = task.DAYS_UNTIL,
                                IS_COMPLETED = false, // Reset task status
                                DONE_DATE = null,
                                OVERDUE = 0
                            };
                        // Save the cloned task in the database
                        await PlantService.AddTask(newTask);
                    }
                }
            }
        }
        // Notify the parent component that the submission is complete
        await OnSubmit.InvokeAsync();
        // Navigate back to the garden page and refresh the data
        NavigationManager.NavigateTo("/Garden", forceLoad: true);
    }

    // ******************************************************************************
    // Code for the EDIT button
    // ******************************************************************************
    private async Task EditSelectedPlant()
    {
        if (selectedPublicPlantId.HasValue)
        {
            // Fetch the existing plant details
            var originalPlant = await PlantService.GetPlantByID(selectedPublicPlantId.Value);

            if (originalPlant != null)
            {
                // Prefill the custom plant form with the selected plant's data
                plant = new Plants
                    {
                        PLANT_NAME = originalPlant.PLANT_NAME,
                        IMAGE_DATA = originalPlant.IMAGE_DATA,
                        USER_ID = await UserServices.GetUserID(user_email),
                        IS_PRIVATE = "Y" // Ensures it's saved under the current user
                    };

                // Fetch and prefill task frequencies
                var originalTasks = await PlantService.GetTasksForPlant(originalPlant.PLANT_ID);
                foreach (var task in originalTasks)
                {
                    switch (task.TASK_NAME)
                    {
                        case "Watering": waterFreq = task.FREQ ?? 0; break;  // Use ?? 0 to handle nulls?? ion know
                        case "Weeding": weedFreq = task.FREQ ?? 0; break;
                        case "Pruning": pruneFreq = task.FREQ ?? 0; break;
                        case "Pest Control": pestFreq = task.FREQ ?? 0; break;
                    }
                }

                // Switch to the custom plant form
                ShowCustomForm();
            }
        }
    }

    // ******************************************************************************
    // Show Custom Form
    // ******************************************************************************
    private void ShowCustomForm()
    {
        showCustomForm = true;
        showPrefilledForm = false;
    }

    // ******************************************************************************
    // Show Pre-Filled Form
    // ******************************************************************************
    private void ShowPrefilledForm()
    {
        showCustomForm = false;
        showPrefilledForm = true;
    }
}