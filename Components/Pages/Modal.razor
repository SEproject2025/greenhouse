@if (IsVisible)
{
    <div class="modal-overlay" @onclick="HandleOverlayClick">
        <div class="modal-content" @onclick:stopPropagation="true">
            <button @onclick="ClosePopup" class="close-button">&times;</button>
            @ChildContent
        </div>
    </div>
}
@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    public async Task ClosePopup()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    public async Task CloseFromSubmit() // Allows external components to close the modal
    {
        await ClosePopup();
    }

    private async Task HandleOverlayClick()
    {
        await ClosePopup();
    }
}

<!-- Css for modal popup -->
<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        position: relative;
        width: 50%;       /* Adjust this percentage as needed   */
        max-width: 400px; /* Ensures it doesn’t get too wide    */
        min-width: 250px; /* Prevents it from getting too small */
    }

    .close-button {
        background: none;
        border: none;
        font-size: 24px;
        position: absolute;
        top: 5px;
        right: 5px;
        cursor: pointer;
    }
</style>
