@page "/Garden"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@inject IPlantService PlantService
@inject IUserServices UserServices
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
<!--***********************************************************************
*	                             CSS/STYLING SECTION                      *
************************************************************************-->
<style type="text/css">

    /* Styling for the green box                                         */
    .main {
        margin: 50px auto;
        width: 700px;
        padding-top: 10px;
        padding-bottom: 10px;
        background-color: #725D4C;
        border-radius: 20px;
        box-shadow: 10px 10px 8px #888888;
    }


        /* Inner Container for the grid                                       */
        .main .inner {
            display: flex;
            flex-wrap: wrap; /* Allows items to wrap to the next line */
            justify-content: center; /* Centers items horizontally            */
            gap: 20px; /* Space between tiles                   */
            padding: 10px;
        }

    /* Delete button as a shovel icon in the top-left corner of the tile    */
    .delete-button {
        position: absolute;
        top: 10px;
        right: 10px; /* Changed from left to right                        */
        width: 30px;
        height: 30px;
        background: url('/images/shovel-icon.png') no-repeat center center;
        background-size: contain;
        border: none;
        cursor: pointer;
        outline: none;
    }

        .delete-button:hover {
            opacity: 0.8;
        }

    /* Styling for the green fade effect when the Next Day button is clicked */
    .tile.green-fade {
        background-color: #B0E57C;
        transition: background-color 2s ease-out; /* Smooth transition */
        color: transparent; /* Hide text content */
        position: relative; /* For positioning the image */
        z-index: 0;
    }

        /* Styling for the image when the tile is green */
        .tile.green-fade img {
            opacity: 0; /* Slight transparency for the image */
            position: absolute; /* Position the image absolutely inside the tile */
            top: 13.7%; /* Adjust top position as needed */
            left: 19%; /* Adjust left position as needed */
            width: 60%; /* Resize the image to fit inside the tile */
            height: auto;
            object-fit: contain; /* Ensure the image maintains aspect ratio */
            z-index: 2; /* Ensure the image is above the background */
            border-radius: 50%; /* Round the corners of the image */
            border: 5px solid #4B8B3B; /* Black border around the image */
            transition: opacity 4s ease-out; /* Smooth fade-in transition */
        }

        /* When the tile has the green-fade class applied */
        .tile.green-fade img {
            opacity: 0.9; /* Final opacity when faded */
            border: 5px solid #4B8B3B; /* Black border around the image */
        }

    .title {
        font-size: 36px;
        color: #2C6E49;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'Georgia', serif;
    }

    button.btn {
        background-color: #6BBF59;
        color: #FFFFFF;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 16px;
        margin: 10px 5px;
        cursor: pointer;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
    }

        button.btn:hover {
            background-color: #5AA74E;
        }

    .tiles-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 50px;
        padding: 30px;
    }

    .tile {
        height: 250px;
        width: 300px;
        background-color: #d2d9d5;
        border: 2px solid black;
        display: inline-block;
        position: relative;
        border-radius: 15px;
        padding: 40px 10px 10px; /* Added top padding */
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2), -5px -5px 15px rgba(255, 255, 255, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .tile:hover {
            transform: scale(1.05);
            box-shadow: 8px 8px 20px rgba(0, 0, 0, 0.3), -8px -8px 20px rgba(255, 255, 255, 0.2);
        }

        /* Styling for the plant name - targets spans inside the tiles       */
        /*********************************************************************/
        .tile span {
            position: absolute; /* Keep it at the top */
            top: 10px; /* Adjust to be near the top */
            left: 15px; /* Adjust left padding */
            color: black;
            font-size: 18px;
            font-family: Arial, sans-serif;
            font-weight: bold; /* Make it stand out */
        }

        /* Styling for formatting checkbox - targets checkbox input          */
        /*********************************************************************/
        .tile input[type="checkbox"] {
            /* Not sure why ChatGPT had me put this here but I'm afraid to remove it */
        }

        /* Styling for the checkbox label - targets labels                   */
        /*********************************************************************/
        .tile label {
            position: static; /* absolute; */
            display: block;
            margin-top: 5px;
            top: 58%;
            left: 40px;
            color: black;
            font-family: Arial, sans-serif;
            font-size: 14px;
        }

    .task-container {
        display: flex;
        align-items: center; /* Aligns checkbox and label vertically */
        gap: 8px; /* Adds space between checkbox and text */
        margin-top: 5px; /* Ensures space between task items */
    }

        .task-container input[type="checkbox"] {
            margin-left: 2px; /* Move checkbox to the right */
        }

    /* Hides the content of the tile when it's green */
    .tile.green-fade span,
    .tile.green-fade input[type="checkbox"],
    .tile.green-fade label {
        display: none;
    }
    }
</style>

<!--***********************************************************************
*	                             HTML SECTION                             *
************************************************************************-->
<h3 class="title">My Garden</h3>

<AddPlantButton />

<div class="tiles-container">
    @if (plant == null || !plant.Any())
    {
        @if (plant == null)
        {
            <p>Loading . . . </p>
        }
        else
        {
            <p>You have no plants</p>
        }
    }
    else
    {
        @foreach (var p in plant)
        {
            @if (p.IS_PRIVATE == "Y")
            {
                <div class="tile @(plantGreenStates.ContainsKey(p.PLANT_ID) && plantGreenStates[p.PLANT_ID] ? "green-fade" : "")">

                    @if (!(plantGreenStates.ContainsKey(p.PLANT_ID) && plantGreenStates[p.PLANT_ID]))
                    {
                        <button @onclick="() => DeletePlant(p.PLANT_ID)" class="delete-button"></button>
                        <span>@p.PLANT_NAME</span>
                        @if (p.IMAGE_DATA != null && p.IMAGE_DATA.Length > 0)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(p.IMAGE_DATA)"
                                 alt="@p.PLANT_NAME"
                                 style="width: 75px; height: 80px; border-radius: 10px; margin-top: 0px;" />
                        }
                    }

                    <!-- Determines when the checkboxes are visible on the plant tiles -->
                    @foreach (var t in user_tasks)
                    {
                        @if (p.PLANT_ID == t.PLANT_ID && (t.DAYS_UNTIL == 0 || (t.DONE_DATE == CurrentDay || t.DONE_DATE == null)))
                        {
                            <div class="task-container">
                                <input type="checkbox"
                                       id="@t.TASK_NAME-@p.PLANT_ID"
                                       name="@t.TASK_NAME-@p.PLANT_ID"
                                       checked='@t.IS_COMPLETED'
                                       @onchange="(e) => CheckboxChecked(e, t)"
                                       disabled="@(t.IS_COMPLETED ? "disabled" : null)" />

                                <label for="@t.TASK_NAME-@p.PLANT_ID">@t.TASK_NAME</label>
                            </div>
                        }
                    }

                    <!-- Image of the plant (only visible when green) -->
                    @if (plantGreenStates.ContainsKey(p.PLANT_ID) && plantGreenStates[p.PLANT_ID])
                    {
                        @if (p.IMAGE_DATA != null && p.IMAGE_DATA.Length > 0)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(p.IMAGE_DATA)"
                                 alt="@p.PLANT_NAME" />
                        }
                        else
                        {
                            <img src="/images/Default.webp"
                                 alt="Default Plant Image" />
                        }
                    }
                </div>
            }
        }
    }
</div>

<!-- Button to advance the day -->
<button @onclick="GoToNextDay" class="btn btn-primary">Next Day &gt;&gt;</button>

<!-- Display the current day -->
<p>Current Day: @CurrentDay.ToString("MMMM dd, yyy")</p>
<!-- <p>Current Day2: @CurrentDay</p> -->

<button @onclick="Toggle">hello</button>
<p>Show_Password: @showpassword</p>


<!--***********************************************************************
*	                             CODE SECTION                             *
************************************************************************-->
@code {

    List<Plants>? plant = null;

    // The list of currently active tasks
    List<PlantTask> user_tasks = new List<PlantTask>();

    // Tracks the current simulated day
    private DateTime CurrentDay { get; set; } = DateTime.Now.Date;
    //private bool fadeToGreen = false;
    // Dictionary to track which plants should fade to green
    private Dictionary<int, bool> plantGreenStates = new();

    private AuthenticationState? authState;
    private ClaimsPrincipal? user;
    private string? user_email;

    private string uuid;

    private int counter;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        user_email = user.Identity.Name;
        uuid = await UserServices.GetUserID(user_email);


        // Gets the current user's plants and tasks
        plant = await PlantService.GetUserPlants(uuid);
        user_tasks = await PlantService.GetAllUserTasks(uuid);
        UpdatePlantFade();
    }

    async Task DeletePlant(int PLANT_ID)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this plant?");
        if (confirmed)
        {
            await PlantService.DeletePlant(PLANT_ID);
            plant = await PlantService.GetUserPlants(uuid);
            user_tasks = await PlantService.GetAllUserTasks(uuid);
            StateHasChanged();
        }
    }

    /* Advances the internal day tracker by 1 */
    private void GoToNextDay()
    {
        //fadeToGreen = !fadeToGreen;  // Toggle the green fade state every time
        CurrentDay = CurrentDay.AddDays(1);

        // Reset the green fade effect for all plants
        foreach (var key in plantGreenStates.Keys.ToList())
        {
            plantGreenStates[key] = false;
        }

        // Handles checkbox logic for when it goes to the next day
        foreach (var t in user_tasks)
        {
            if (t.IS_COMPLETED == true)
            {
                t.DAYS_UNTIL--;
                if (t.DAYS_UNTIL == 0)
                {
                    t.IS_COMPLETED = false;
                }
            }
            else
            {
                t.OVERDUE++;
            }
            PlantService.UpdateTask(t);

        }
        // Update the fade state of plants after it goes to the next day
        UpdatePlantFade();
        StateHasChanged();
    }

    private void UpdatePlantFade()
    {
        foreach (var p in plant)
        {
            plantGreenStates[p.PLANT_ID] = AllTasksFinished(p.PLANT_ID);
        }
    }

    /* Alters the local copy of the data and the database to reflect the user's action */
    async Task CheckboxChecked(ChangeEventArgs e, PlantTask t)
    {
        t.IS_COMPLETED = true;
        t.DAYS_UNTIL = t.FREQ;
        if (t.OVERDUE != 0)
        {
            t.OVERDUE = 0;
        }
        t.DONE_DATE = CurrentDay;
        await PlantService.UpdateTask(t);

        // Update the fade state of plants after a task is checked
        UpdatePlantFade();
        StateHasChanged();
    }

    // Checks if all tasks for a given plant id are completed at a given time
    private bool AllTasksFinished(int plant_id)
    {
        counter = 0;
        @foreach (var t in user_tasks)
        {
            @if (plant_id == t.PLANT_ID && t.IS_COMPLETED == true)
            {
                counter++;
            }
        }
        return (counter == NumberOfActiveTasks(plant_id));
    }

    private int NumberOfActiveTasks(int plant_id)
    {
        counter = 0;
        @foreach (var t in user_tasks)
        {
            @if (plant_id == t.PLANT_ID && t.FREQ != 0)
            {
                counter++;
            }
        }
        return counter;
    }
}

