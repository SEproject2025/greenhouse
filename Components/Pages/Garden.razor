@page "/Garden"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@inject IPlantService PlantService
@inject IUserServices UserServices
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
<!--***********************************************************************
*	                             CSS/STYLING SECTION                      *
************************************************************************-->
<style type="text/css">
    /* Styling for the green box                                         */
    .main {
        margin: 50px auto;
        width: 700px;
        padding-top: 10px;
        padding-bottom: 10px;
        background-color: #725D4C;
        border-radius: 20px;
        box-shadow: 10px 10px 8px #888888;
    }

        /* Inner Container for the grid                                       */
        .main .inner {
            display: flex;
            flex-wrap: wrap; /* Allows items to wrap to the next line */
            justify-content: center; /* Centers items horizontally            */
            gap: 20px; /* Space between tiles                   */
            padding: 10px;
        }

    .delete-button {
        position: absolute;
        top: 10px;
        right: 10px; /* Changed from left to right                        */
        width: 30px;
        height: 30px;
        background: url('/images/shovel-icon.png') no-repeat center center;
        background-size: contain;
        border: none;
        cursor: pointer;
        outline: none;
    }

        .delete-button:hover {
            opacity: 0.8;
        }

    /* Styling for the green fade effect when the Next Day button is clicked */
    .tile.green-fade {
        background-color: #B0E57C;
        transition: background-color 2s ease-out; /* Smooth transition */
        color: transparent; /* Hide text content */
        position: relative; /* For positioning the image */
        z-index: 0;
    }

    /* Styling for the image when the tile is green */
        .tile.green-fade img {
            opacity: 0; /* Slight transparency for the image */
            position: absolute; /* Position the image absolutely inside the tile */
            top: 6.5%; /* Adjust top position as needed */
            left: 10%; /* Adjust left position as needed */
            width: 73%; /* Resize the image to fit inside the tile */
            height: auto;
            object-fit: contain; /* Ensure the image maintains aspect ratio */
            z-index: 2; /* Ensure the image is above the background */
            border-radius: 15px; /* Round the corners of the image */
            transition: opacity 4s ease-out; /* Smooth fade-in transition */
        }

        /* When the tile has the green-fade class applied */
        .tile.green-fade img {
            opacity: 0.6; /* Final opacity when faded */
        }

    .title {
        font-size: 36px;
        color: #2C6E49;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'Georgia', serif;
    }

    button.btn {
        background-color: #6BBF59;
        color: #FFFFFF;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 16px;
        margin: 10px 5px;
        cursor: pointer;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
    }

        button.btn:hover {
            background-color: #5AA74E;
        }

    .tiles-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 50px;
        padding: 30px;
    }

    .tile {
        height: 250px;
        width: 300px;
        background-color: #d2d9d5;
        border: 2px solid black;
        display: inline-block;
        position: relative;
        border-radius: 15px;
        padding: 10px;
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2), -5px -5px 15px rgba(255, 255, 255, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .tile:hover {
            transform: scale(1.05);
            box-shadow: 8px 8px 20px rgba(0, 0, 0, 0.3), -8px -8px 20px rgba(255, 255, 255, 0.2);
        }

        .tile span {
            position: absolute;
            top: 15%;
            left: 200px;
            color: black;
            font-size: 18px;
            font-family: Arial, sans-serif;
        }

        .tile input[type="checkbox"] {
            position: absolute;
            top: 60%;
            left: 25px;
        }

        .tile label {
            position: absolute;
            top: 58%;
            left: 40px;
            color: black;
            font-family: Arial, sans-serif;
            font-size: 14px;
        }

        /* Hides the content of the tile when it's green */
        .tile.green-fade span,
        .tile.green-fade input[type="checkbox"],
        .tile.green-fade label {
            display: none;
        }
</style>

<!--***********************************************************************
*	                             HTML SECTION                             *
************************************************************************-->
<h3 class="title">My Garden</h3>

<AddPlantButton />

<div class="tiles-container">
    @if (plant == null || !plant.Any())
    {
        @if (plant == null)
        {
            <p>Loading . . . </p>
        }
        else
        {
            <p>You have no plants</p>
        }
    }
    else
    {
        @foreach (var p in plant)
        {
            @if (p.IS_PRIVATE == "Y")
            {
                <div class="tile @(fadeToGreen ? "green-fade" : "")">
                    <button @onclick="() => DeletePlant(p.PLANT_ID)" class="delete-button"></button>

                    @if (!fadeToGreen)
                    {
                        <span>@p.PLANT_NAME</span>
                        @if (p.IMAGE_DATA != null && p.IMAGE_DATA.Length > 0)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(p.IMAGE_DATA)"
                                 alt="@p.PLANT_NAME"
                                 style="width: 75px; height: 80px; border-radius: 10px; margin-top: 0px;" />
                        }
                    }

                    <!-- Image of the plant (only visible when green) -->
                    @if (fadeToGreen)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(p.IMAGE_DATA)"
                             alt="@p.PLANT_NAME" />
                    }
                </div>
            }
        }
    }
</div>

<!-- Button to advance the day -->
<button @onclick="GoToNextDay" class="btn btn-primary">Next Day &gt;&gt;</button>
<!-- Display the current day -->
<p>Current Day: @CurrentDay.ToString("MMMM dd, yyy")</p>

@code {
    List<Plants>? plant = null;
    private DateTime CurrentDay { get; set; } = DateTime.Now.Date;
    private bool fadeToGreen = false;  // Track the green fade state

    private AuthenticationState? authState;
    private ClaimsPrincipal? user;
    private string? user_email;
    private string uuid;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        user_email = user.Identity.Name;
        uuid = await UserServices.GetUserID(user_email);

        plant = await PlantService.GetUserPlants(uuid);
    }

    async Task DeletePlant(int PLANT_ID)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this plant?");
        if (confirmed)
        {
            await PlantService.DeletePlant(PLANT_ID);
            plant = await PlantService.GetUserPlants(uuid);
            StateHasChanged();
        }
    }

    private void GoToNextDay()
    {
        fadeToGreen = !fadeToGreen;  // Toggle the green fade state every time
        CurrentDay = CurrentDay.AddDays(1);
        StateHasChanged();
    }
}
