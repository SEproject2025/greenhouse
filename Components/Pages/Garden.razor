@page "/Garden"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@inject IPlantService PlantService
@inject IUserServices UserServices
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
<!--***********************************************************************
*	                             CSS/STYLING SECTION                      *
************************************************************************-->
<style type="text/css">

    /* Styling for the additional image */
    .additional-image {
        width: 75px; /* Set the desired size for the additional image */
        height: 80px;
        border-radius: 10px;
        margin-top: 0px;
    }

    body {
        background: url('/background_photos/WaterColor.png') center/cover no-repeat;
        min-height: 100vh;
        margin: 0;
        font-family: 'Merriweather', serif;
    }

    .Buttons {
        position: absolute;
        top: 50px;
        left: 50px;
        display: flex;
        gap: 10px; /* Adds spacing between buttons */
    }

    button.btn {
        background-color: #CFE8A9;
        color: #FFFFFF;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 16px;
        margin: 10px 5px;
        cursor: pointer;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
    }

        button.btn:hover {
            background-color: #CFE8A9;
        }

    button.btn2 {
        background-color: #CFE8A9;
        color: #FFFFFF;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 16px;
        margin: 10px 5px;
        cursor: pointer;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease;
    }

        button.btn2:hover {
            background-color: #CFE8A9;
        }

    .circular-progress {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        background: conic-gradient(green 0deg, lightgray 0deg);
    }

        /* Inner Circle */
        .circular-progress .inner-circle {
            position: absolute;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 12px;
            font-weight: bold;
        }

    /* Container to hold the health icon and label */
    .health-status-container {
        position: absolute; 
        margin-left: 225px;
        text-align: right;
    }

    /* Styling for the image container */
    .image-container {
        position: relative;
        top: 5px;
        display: flex; /* Use flexbox to arrange images side by side */
        align-items: center; /* Vertically center the images */
        gap: 15px; /* Space between the images */
    }

    /* Styling for the green box                                         */
    .main {
        margin: 50px auto;
        width: 700px;
        padding-top: 10px;
        padding-bottom: 10px;
        background-color: #725D4C;
        border-radius: 20px;
        box-shadow: 10px 10px 8px #888888;
    }

        /* Inner Container for the grid */
        .main .inner {
            display: flex;
            flex-wrap: wrap; /* Allows items to wrap to the next line */
            justify-content: center; /* Centers items horizontally */
            gap: 20px; /* Space between tiles */
            padding: 10px;
        }

    /* Smaller health image */
    .plant-health-image {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: block;
        margin: 0 auto;
    }

    /* Smaller label under image */
    .plant-health-label {
        font-size: 12px;
        font-family: 'Gloria Hallelujah', cursive;
        color: #66B266;
        margin-top: 2px;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1), 0px 0px 5px rgba(75, 139, 59, 0.5);
    }

    .plant-image {
        top: .5px;
        width: 125px;
        height: 124px;
        border-radius: 50%;
        border: 2px solid black;
        align-self: center;
    }

    .plant-name {
        font-size: 20px;
        font-weight: bold;
        font-family: Arial, sans-serif;
        color: black;
        padding-left: 5px;
        padding-right: 5px;
        min-height: 30px;
        min-width: 120px;
        max-width: 275px;
        overflow: hidden;
        text-overflow: ellipsis;
        text-align: center;
        justify-content: center;
        align-self: center;
        white-space: nowrap;
        background-color: #f7f3e8;
        border: 1px solid #2C6E49;
        display: block;
        position: relative;
        top: -15px;
        border-radius: 10px;
        box-shadow: 2px 2px 15px rgba(0, 0, 0, 0.5), -5px -5px 15px rgba(255, 255, 255, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .progress-bar-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px; /* Add spacing between circles */
        margin-top: 10px; /* Space above tasks */
    }

    .progress-icon {
        width: 25px; /* Adjust icon size */
        height: 25px;
        object-fit: contain; /* Ensure it fits well inside the circle */
    }

    .progress-item {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .progress-label {
        font-size: 12px !important; /* Adjust size */
        margin-top: 38px; /* Less spacing between progress bar and text */
        color: black;
        text-align: center;
        white-space: nowrap; /* Prevents text from wrapping */
    }

    .task-container {
        display: flex;
        align-items: center; /* Aligns items vertically */
        justify-content: space-between; /* Pushes the label and checkbox apart */
        width: 100%; /* Makes sure container spans the full width */
        padding-right: 10px; /* Adds spacing to keep the checkbox away from the edge */
        margin-top: 10px; /* Adds vertical space between tasks */
        /* padding-bottom: 6px; /* Slight extra padding to separate tasks visually */
    }

        .task-container input[type="checkbox"] {
            margin-left: auto; /* Moves checkbox to the right */
            transform: scale(1.2); /* Slightly enlarges checkbox for better visibility */
            width: 15px;
            height: 15px;
        }

    .task-icon {
        width: 30px; /* Adjust icon size */
        height: 30px;
        margin-right: 8px;
        vertical-align: middle;
        border: 2px solid black; /* Adds black circular border */
        border-radius: 60%; /* Makes it a perfect circle */
        padding: 3px; /* Ensures proper spacing inside the circle */
        background-color: white; /* Optional: Adds contrast */
    }

    .task-label {
        font-size: 20px; /* Increase task text size */
        /* font-weight: bold; */
    }

    .task-label-overdue {
        font-size: 20px; /* Increase task text size */
        color: red;
        font-weight: bold;
    }

    .tile {
        height: 450px;
        width: 300px;
        background-color: #f7f3e8;
        border: 3px solid #2C6E49;
        display: flex;
        flex-direction: column;
        align-content: center;
        border-radius: 15px;
        padding: 15px 10px 10px; /* Added top padding */
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2), -5px -5px 15px rgba(255, 255, 255, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        position: relative;
    }

        .tile:hover {
            transform: scale(1.05);
            box-shadow: 8px 8px 20px rgba(0, 0, 0, 0.3), -8px -8px 20px rgba(255, 255, 255, 0.2);
        }

        /* Styling for the plant name - targets spans inside the tiles       */
        /*********************************************************************/
        .tile span {
            position: absolute; /* Keep it at the top */
            top: 10px; /* Adjust to be near the top */
            left: 15px; /* Adjust left padding */
            color: black;
            font-size: 18px;
            font-family: Arial, sans-serif;
            font-weight: bold; /* Make it stand out */
        }

        /* Styling for formatting checkbox - targets checkbox input          */
        /*********************************************************************/
        .tile input[type="checkbox"] {
            /* Not sure why ChatGPT had me put this here but I'm afraid to remove it */
        }

        /* Styling for the checkbox label - targets labels                   */
        /*********************************************************************/
        .tile label {
            position: static; /* absolute; */
            display: block;
            margin-top: 5px;
            top: 58%;
            left: 40px;
            /*  color: black; */
            font-family: Arial, sans-serif;
            font-size: 14px;
        }

    /* Styling for the green fade effect when the Next Day button is clicked */
    .tile.green-fade {
        background-color: #B0E57C;
        transition: background-color 2s ease-out; /* Smooth transition */
        color: transparent; /* Hide text content */
        position: relative; /* For positioning the image */
        z-index: 0;
    }

        /* Styling for the image when the tile is green */
        .tile.green-fade img {
            opacity: 0; /* Slight transparency for the image */
            position: absolute; /* Position the image absolutely inside the tile */
            top: 13.7%; /* Adjust top position as needed */
            left: 19%; /* Adjust left position as needed */
            width: 60%; /* Resize the image to fit inside the tile */
            height: auto;
            object-fit: contain; /* Ensure the image maintains aspect ratio */
            z-index: 2; /* Ensure the image is above the background */
            border-radius: 50%; /* Round the corners of the image */
            border: 5px solid #4B8B3B; /* Black border around the image */
            transition: opacity 4s ease-out; /* Smooth fade-in transition */
        }

        /* When the tile has the green-fade class applied */
        .tile.green-fade img {
            opacity: 0.9; /* Final opacity when faded */
            border: 5px solid #4B8B3B; /* Black border around the image */
        }

        /* Hides the content of the tile when it's green */
        .tile.green-fade span,
        .tile.green-fade input[type="checkbox"],
        .tile.green-fade label
        .tile.green-fade .progress-bar-wrapper {
            display: none;
        }

    .tiles-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 50px;
        padding: 30px;
    }

    .title {
        font-size: 36px;
        color: #2C6E49;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'Georgia', serif;
    }

    /* Container for the draggable tool icons */
    .tool-tray {
        position: absolute;
        top: 20px;
        right: 20px;
        display: flex;
        gap: 20px; /* spacing between tools */
        z-index: 999;
    }

    /* Shared styling for all tool icons */
    .tool-icon {
        width: 60px;
        height: auto;
        cursor: grab;
        border: 2px solid black;
        border-radius: 10px;
        background-color: white;
        padding: 3px;
    }
    /* New tool-key container that acts as a legend */
    .tool-key {
        position: fixed; /* changed from absolute */
        top: 90px;
        right: 20px;
        background-color: #fff;
        padding: 10px 15px;
        border: 2px solid #4B8B3B;
        border-radius: 10px;
        display: flex;
        flex-direction: row;
        gap: 15px;
        z-index: 999;
        box-shadow: 4px 4px 12px rgba(0, 0, 0, 0.2);
    }

    /* Each tool + label bundle */
    .tool-item {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    /* Label underneath each icon */
    .tool-label {
        font-size: 12px;
        color: #2C6E49;
        margin-top: 5px;
        font-weight: bold;
    }

    .pulsing-dot {
        position: absolute; /* Make sure it's not inside the flex flow */
        top: 8px;
        left: 8px;
        width: 16px;
        height: 16px;
        min-width: 16px;
        min-height: 16px;
        background-color: red;
        border-radius: 50%;
        z-index: 10;
        box-shadow: 0 0 0 rgba(255, 0, 0, 0.7);
        animation: pulse 1.5s infinite;
        pointer-events: auto; /* Prevents it from interfering with hover/clicks */
    }


    @@keyframes pulse {
        0% {transform: scale(0.95); box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.7);}
        70% { transform: scale(1.1); box-shadow: 0 0 0 10px rgba(255, 0, 0, 0);}
        100% {transform: scale(0.95);box-shadow: 0 0 0 0 rgba(255, 0, 0, 0); }
    }

</style>


<!--***********************************************************************
*	                             HTML SECTION                             *
************************************************************************-->
<div class="page-header">
    <!-- Title -->
    <div class="page-title">
        <h3 class="title">My Garden
        @if (R_CurrentDay == DateTime.MinValue)
            {
                <p>Loading...</p>
            }
            else
            {
                <p>@R_CurrentDay.ToString("MMMM dd, yyyy")</p>
            }
        </h3>
    </div>
</div>

<div class="Buttons">
    <AddPlantButton />
    <button @onclick="GoToNextDay" class="btn btn-primary next-day-btn">Finish Day</button>
</div>

<div class="tool-key">
    <div class="tool-item">
        <img src="/plant_tasks/WateringCan.png"
        id="watering-can"
        class="tool-icon"
        draggable="true"
        ondragstart="handleDragStart(event)"
        alt="Watering Can" />
        <div class="tool-label">Water</div>
    </div>

    <div class="tool-item">
        <img src="/plant_tasks/PruningTool.png"
        id="pruning-tool"
        class="tool-icon"
        draggable="true"
        ondragstart="handlePruningDragStart(event)"
        alt="Pruning Tool" />
        <div class="tool-label">Prune</div>
    </div>

    <div class="tool-item">
        <img src="/plant_tasks/BugSpray.png"
        id="bugspray-tool"
        class="tool-icon"
        draggable="true"
        ondragstart="handlePestControlDragStart(event)"
        alt="Bug Spray" />
        <div class="tool-label">Pest Control</div>
    </div>

    <div class="tool-item">
        <img src="/plant_tasks/Gloves.png"
        id="gloves-tool"
        class="tool-icon"
        draggable="true"
        ondragstart="handleWeedingDragStart(event)"
        alt="Gloves" />
        <div class="tool-label">Weed</div>
    </div>

    <div class="tool-item">
        <img src="/plant_tasks/Shovel.png"
        id="shovel-tool"
        class="tool-icon"
        draggable="true"
        ondragstart="handleShovelDragStart(event)"
        alt="Shovel Tool" />
        <div class="tool-label">Delete</div>
    </div>
</div>

<div class="tiles-container">
    @if (plant == null) // Plant list is currently loading
    {
        <div style="text-align: center;">
            <p> Loading . . .</p>
            <div class="loader"></div> 
        </div>
    }
    else if (!plant.Any()) // User has no plants
    {
        <p>You have no plants</p>
    }
    else // User has plants
    {
        @foreach (var p in plant)
        {
            <div class="tile @(plantGreenStates.ContainsKey(p.PLANT_ID) && plantGreenStates[p.PLANT_ID] ? "green-fade" : "")"
            ondragover="event.preventDefault()"
            ondrop="handleGenericDrop(event, @p.PLANT_ID)">

                @if (
                   plantOverdueCounts.ContainsKey(p.PLANT_ID) &&
                   plantOverdueCounts[p.PLANT_ID] > 0 &&
                   !(plantGreenStates.ContainsKey(p.PLANT_ID) && plantGreenStates[p.PLANT_ID])
                )
                {
                    <div class="pulsing-dot" title="You have an overdue task"></div>
                }


                @if (!(plantGreenStates.ContainsKey(p.PLANT_ID) && plantGreenStates[p.PLANT_ID])) // Plant is not finished for the day
                {
                    <div class="health-status-container">
                        @if (plantOverdueCounts.ContainsKey(p.PLANT_ID))
                        {
                            var overdue_counter = plantOverdueCounts[p.PLANT_ID];
                            if (overdue_counter == 0)
                            {
                                <img src="/plant_health_images/Healthy.png" alt="Healthy" class="plant-health-image" />
                            }
                            else if (overdue_counter > 0 && overdue_counter <= 7)
                            {
                                <img src="/plant_health_images/Ok.png" alt="Ok" class="plant-health-image" />
                            }
                            else if (overdue_counter > 7 && overdue_counter <= 14)
                            {
                                <img src="/plant_health_images/Unhealthy.png" alt="Unhealthy" class="plant-health-image" />
                            }
                            else if (overdue_counter > 14)
                            {
                                <img src="/plant_health_images/Dying.png" alt="Dying" class="plant-health-image" />
                            }
                            <div class="plant-health-label">Status</div>
                        }
                    </div>

                    @if (p.IMAGE_DATA != null && p.IMAGE_DATA.Length > 0)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(p.IMAGE_DATA)"
                        alt="@p.PLANT_NAME"
                        class="plant-image" />
                    }

                    <div class="plant-name" title="@p.PLANT_NAME">@p.PLANT_NAME</div>

                    

                    <!-- Circular Progress Bar Container - Positioned Above Tasks -->
                    <!-- Wrap Progress Bars Inside a Container to Prevent Showing on Green-Fade -->
                    <div class="progress-bar-wrapper">
                        <div class="progress-bar-container">
                            @foreach (var t in user_tasks.Where(task => task.PLANT_ID == p.PLANT_ID))
                            {
                                <div class="progress-item">
                                    <div class="circular-progress" id="progress-@t.TASK_ID"
                                    data-percentage="@CalculateTaskProgress(t.DAYS_UNTIL, t.FREQ)">
                                        <div class="inner-circle">
                                            <img src="@GetTaskIcon(t.TASK_NAME)" alt="@t.TASK_NAME icon" class="progress-icon" />
                                        </div>                       
                                    </div>                                
                                </div>                                
                            }
                        </div>
                    </div>
                    <p style="align-self: center"> _______________________________ </p>
                    <!-- Task List Container - Below Progress Bars -->
                    <div class="task-list">
                        @foreach (var t in user_tasks)
                        {
                            @if (p.PLANT_ID == t.PLANT_ID && (t.DAYS_UNTIL == 0 || (t.DONE_DATE == R_CurrentDay || t.DONE_DATE == null)))
                            {
                                <div class="task-container">
                                    <img   src="@GetTaskIcon(t.TASK_NAME)" alt="@t.TASK_NAME icon" class="task-icon" />
                                    <label for="@t.TASK_NAME-@p.PLANT_ID" 
                                    class="@(t.OVERDUE > 0 ? "task-label-overdue" : "task-label")">@t.TASK_NAME</label>
                                    <input type="checkbox"
                                    class="task-checkbox"
                                    id="@t.TASK_NAME-@p.PLANT_ID"
                                    name="@t.TASK_NAME-@p.PLANT_ID"
                                    checked='@t.IS_COMPLETED'
                                    @onchange="(e) => CheckboxChecked(e, t)"
                                    disabled="@(t.IS_COMPLETED ? "disabled" : null)"/>
                                </div>
                            }
                        }
                    </div>
                }
                else
                {
                    @if (p.IMAGE_DATA != null && p.IMAGE_DATA.Length > 0)
                    {
                        <img src="data:image/png;base64,@Convert.ToBase64String(p.IMAGE_DATA)"
                             alt="@p.PLANT_NAME" />
                    }
                    else
                    {
                        <img src="/images/Default.webp"
                             alt="Default Plant Image" />
                    }
                }
            </div>
        }
    }
</div>

<!--***********************************************************************
*	                             CODE SECTION                             *
************************************************************************-->
@code {

    List<Plants>?   plant = null;
    List<PlantTask> user_tasks = new List<PlantTask>();  // The list of currently active tasks

    private DateTime R_CurrentDay { get; set; }
    private string   uuid = null!;

    // Dictionary to track which plants should fade to green
    private Dictionary<int, bool> plantGreenStates = new();
    private Dictionary<int, int>  plantOverdueCounts = new Dictionary<int, int>();
    private int tasks_finished_counter;
    private int overdue_counter;

    private bool hasLoaded = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasLoaded) // Ensures it only runs once
        {
            uuid = await UserServices.GetUserID(await AuthenticationStateProvider.GetAuthenticationStateAsync());
            if(uuid == "_NULL_USER_")
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
                return;
            }

            // Fetch user's plants and tasks
            var plantTask = PlantService.GetUserPlants(uuid);
            var tasksTask = PlantService.GetAllUserTasks(uuid);

            // Gets the current user's plants and tasks
            await Task.WhenAll(plantTask, tasksTask);

            plant = await plantTask;
            user_tasks = await tasksTask;

            // Gets the user's relative current day
            R_CurrentDay = await UserServices.GetRelativeCurrentDay(uuid);

            UpdatePlantFade();
            UpdateOverdueCount();

            hasLoaded = true;
            _ = InvokeAsync(StateHasChanged); // Avoid UI thread blocking
        }
        await JSRuntime.InvokeVoidAsync("updateProgressCircles");
        // Register DotnetObjectRefernce
        // Exposes the Blazor component instance to JavaScript so it can be called from JS
        await JSRuntime.InvokeVoidAsync("window.setDotNetHelper",
        DotNetObjectReference.Create(this));
    }

    async Task DeletePlant(int PLANT_ID)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this plant?");
        if (confirmed)
        {
            await PlantService.DeletePlant(PLANT_ID);
            plant = await PlantService.GetUserPlants(uuid);
            user_tasks = await PlantService.GetAllUserTasks(uuid);
            StateHasChanged();
        }
    }

    /* Advances the internal day tracker by 1 */
    private void GoToNextDay()
    {
        //fadeToGreen = !fadeToGreen;  // Toggle the green fade state every time
        R_CurrentDay = R_CurrentDay.AddDays(1);
        UserServices.UpdateUserCurrentDate(uuid, R_CurrentDay);

        // Reset the green fade effect for all plants
        foreach (var key in plantGreenStates.Keys.ToList())
        {
            plantGreenStates[key] = false;
        }

        // Handles checkbox logic for when it goes to the next day
        foreach (var t in user_tasks)
        {
            if (t.IS_COMPLETED == true)
            {
                t.DAYS_UNTIL--;
                if (t.DAYS_UNTIL == 0)
                {
                    t.IS_COMPLETED = false;
                }
            }
            else
            {
                t.OVERDUE++;
            }
            PlantService.UpdateTask(t);

        }
        // Update the fade state of plants after it goes to the next day
        UpdatePlantFade();
        UpdateOverdueCount();
        StateHasChanged();
    }

    //private async Task UpdatePlantFade()
    private void UpdatePlantFade()
    {
        // **Delay for 1 second before flipping tiles**
        // await Task.Delay(2000);

        foreach (var p in plant)
        {
            plantGreenStates[p.PLANT_ID] = AllTasksFinished(p.PLANT_ID);
        }

        // _ = InvokeAsync(StateHasChanged);
    }

    private void UpdateOverdueCount()
    {
        foreach (var p in plant)
        {
            plantOverdueCounts[p.PLANT_ID] = GetOverdueForPlant(p.PLANT_ID);
        }
    }

    // Alters the local copy of the data and the database to reflect the user's action
    async Task CheckboxChecked(ChangeEventArgs e, PlantTask t)
    {
        t.IS_COMPLETED = true;
        t.DAYS_UNTIL = t.FREQ;
        if (t.OVERDUE != 0)
        {
            t.OVERDUE = 0;
        }
        t.DONE_DATE = R_CurrentDay;
        await PlantService.UpdateTask(t);

        // Update the fade state of plants after a task is checked
        UpdatePlantFade();
        StateHasChanged();
    }

    // Checks if all tasks for a given plant id are completed at a given time
    private bool AllTasksFinished(int plant_id)
    {
        tasks_finished_counter = 0;
        @foreach (var t in user_tasks)
        {
            @if (plant_id == t.PLANT_ID && t.IS_COMPLETED == true)
            {
                tasks_finished_counter++;
            }
        }
        return (tasks_finished_counter == NumberOfActiveTasks(plant_id));
    }

    private int NumberOfActiveTasks(int plant_id)
    {
        tasks_finished_counter = 0;
        @foreach (var t in user_tasks)
        {
            @if (plant_id == t.PLANT_ID && t.FREQ != 0)
            {
                tasks_finished_counter++;
            }
        }
        return tasks_finished_counter;
    }

    private int GetOverdueForPlant(int plant_id)
    {
        int overdue_counter = 0;
        foreach (var t in user_tasks)
        {
            if (t.PLANT_ID == plant_id && t.OVERDUE != null)
            {
                overdue_counter += (int)t.OVERDUE;
            }
        }
        return overdue_counter;
    }

    private string GetTaskIcon(string taskName)
    {
        return taskName switch
        {
            "Watering" => "/Icons/Watering.png",
            "Weeding" => "/Icons/Weeding.png",
            "Pruning" => "/Icons/Pruning.png",
            "Pest Control" => "/Icons/PestControl.png",
            _ => "/Icons/Default.png" // Fallback icon in case of unknown task
        };
    }

    // Method to calculate the progress of a task based on the days until the next task
    int CalculateTaskProgress(int? daysUntil, int? freq)
    {
        if (!freq.HasValue || freq.Value == 0) return 0;  // Prevent division by zero

        int freqValue = freq.Value;
        int daysValue = daysUntil ?? 0;  // Default to 0 if null

        if (daysValue == 0) return 0;
        if (daysValue <= freqValue / 4) return 25;
        if (daysValue <= freqValue / 2) return 50;
        if (daysValue <= (3 * freqValue) / 4) return 75;
        return 100;
    }

    // Method to complete the watering task when the watering can is dropped
    // on the plant tile
    // This method is invoked from JavaScript
    [JSInvokable]
    public async Task CompleteWateringTask(int plantId)
    {
        var wateringTask = user_tasks.FirstOrDefault(t =>
            t.PLANT_ID == plantId && t.TASK_NAME == "Watering");

        if (wateringTask != null && !wateringTask.IS_COMPLETED)
        {
            // Reuse the existing CheckboxChecked logic
            await CheckboxChecked(new ChangeEventArgs { Value = true }, wateringTask);
        }
    }

    // Method to complete the pruning task when the pruning tool is dropped
    // on the plant tile
    [JSInvokable]
    public async Task CompletePruningTask(int plantId)
    {
        var task = user_tasks.FirstOrDefault(t =>
            t.PLANT_ID == plantId && t.TASK_NAME == "Pruning");

        if (task != null && !task.IS_COMPLETED)
        {
            await CheckboxChecked(new ChangeEventArgs { Value = true }, task);
        }
    }

    // Method to complete the pest control task when the spray is dropped
    // on the plant tile
    [JSInvokable]
    public async Task CompletePestControlTask(int plantId)
    {
        var task = user_tasks.FirstOrDefault(t =>
            t.PLANT_ID == plantId && t.TASK_NAME == "Pest Control");

        if (task != null && !task.IS_COMPLETED)
        {
            await CheckboxChecked(new ChangeEventArgs { Value = true }, task);
        }
    }

    // Method to complete the weeding task when the gloves are dropped
    // on the plant tile
    [JSInvokable]
    public async Task CompleteWeedingTask(int plantId)
    {
        var task = user_tasks.FirstOrDefault(t =>
            t.PLANT_ID == plantId && t.TASK_NAME == "Weeding");

        if (task != null && !task.IS_COMPLETED)
        {
            await CheckboxChecked(new ChangeEventArgs { Value = true }, task);
        }
    }

    // Method to delete a plant when the shovel is dropped on the plant tile
    [JSInvokable]
    public async Task DeletePlantByDrop(int plantId)
    {
        await PlantService.DeletePlant(plantId);
        plant = await PlantService.GetUserPlants(uuid);
        user_tasks = await PlantService.GetAllUserTasks(uuid);
        UpdatePlantFade();
        UpdateOverdueCount();
        StateHasChanged();
    }
    
}

<!-- JavaScript for the circle progress bars -->  
<script src="js/garden.js"></script>

