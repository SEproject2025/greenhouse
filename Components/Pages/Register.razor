@page "/register"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="registerModel.Email" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="registerModel.Password" />
    </div>
    <button type="submit">Register</button>

    @if (!string.IsNullOrEmpty(registerError))
    {
        <p style="color:red;">@registerError</p>
    }
</EditForm>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string registerError;

    private async Task HandleRegister()
    {
        var user = new ApplicationUser { Email = registerModel.Email, UserName = registerModel.Email };

        // Log the value for debugging
        Console.WriteLine($"Password: '{registerModel.Password}'"); // Add this line for debugging


        if (string.IsNullOrWhiteSpace(registerModel.Password))
        {
            // Handle the case where the password is not provided
            registerError = "Password cannot be empty.";
            return;
        }

        var result = await UserManager.CreateAsync(user, registerModel.Password);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            registerError = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    private class RegisterModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
