@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using greenhouse.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<!--***********************************************************************
*                                CSS/STYLING SECTION
************************************************************************-->
<style>
	.register-wrapper {
		display: flex;
		justify-content: center;
		align-items: center;
		height: 100vh;
		background: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url('/background_photos/Leafy_Blurry.png') center/cover no-repeat;
	}

	.register-container {
		background-color: white;
		padding: 40px;
		border-radius: 12px;
		box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
		width: 100%;
		max-width: 400px;
	}

		.register-container h2 {
			text-align: center;
			margin-bottom: 20px;
		}
	/* The rules of creating a password   */
	.password-rules {
		background-color: #DCEDC8; /* very light green */
		width: fit-content;
		margin: 20px auto;
		padding: 15px 25px;
		border-radius: 10px;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
		font-size: 0.85rem;
	}

		.password-rules h5 {
			color: #2e5338;
			text-align: center;
			margin-bottom: 10px;
			font-size: 1rem;
		}

		.password-rules ul {
			padding-left: 18px;
			margin: 0;
		}

		.password-rules li {
			color: #333;
			margin-bottom: 2px; /* ↓ Smaller spacing between list items */
			line-height: 1; /* ↓ Tighter line height */
		}

	hr {
		border: none;
		border-top: 1px solid #ccc;
		width: 32%;
		margin: 0 auto;
	}

	.btn-primary {
		color: #fff;
		background-color: #128016;
		border-color: #1861ac;
		margin: 0 auto !important;
		display: block;
		width: 70% !important;
	}

		.btn-primary:hover {
			color: #fff;
			background-color: #08590b;
			border-color: #0a58ca;
		}

	.mt-3 {
		text-align: center;
	}

</style>



<!--***********************************************************************
*                                HTML SECTION
************************************************************************-->
<PageTitle>Register</PageTitle>

<h1 class="visually-hidden">Register</h1> <!-- Keeps heading for accessibility -->

<div class="register-wrapper">
	<div class="register-container">
		<section>
			<StatusMessage Message="@Message" />
			<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
				<DataAnnotationsValidator />
				<h2>Create an Account</h2>
				<div class="password-rules">
					<h5>Password Must Have:</h5>
					<ul>
						<li>8 or more characters</li>
						<li>One number</li>
						<li>One lowercase letter</li>
						<li>One uppercase letter</li>
						<li>One special character</li>
					</ul>
				</div>
				<hr />
				<ValidationSummary class="text-danger" role="alert" />
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
					<label for="email">Email</label>
					<ValidationMessage For="() => Input.Email" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
					<label for="password">Password</label>
					<ValidationMessage For="() => Input.Password" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
					<label for="confirm-password">Confirm Password</label>
					<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
				</div>
				<button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
				<div class="mt-3">
					<p>
						<a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Already have an account? Login Now</a>
					</p>
				</div>
			</EditForm>
		</section>
	</div>
</div>

<div class="password-rules">
	<h5>Password Requirements:</h5>
	<ul>
		<li>Must be <b>8</b> or more characters long</li>
		<li>Must have at least one <b>number</b></li>
		<li>Must have at least one <b>lowercase letter</b></li>
		<li>Must have at least one <b>uppercase letter</b></li>
		<li>Must have at least one <b>non-alphanumeric character</b></li>
	</ul>
</div>

<!--***********************************************************************
*                                CODE SECTION
************************************************************************-->
@code {

	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	public async Task RegisterUser(EditContext editContext)
	{
		var user = CreateUser();

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

		user.UserCurrentDay = DateTime.Now.Date;

		var result = await UserManager.CreateAsync(user, Input.Password);

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;
			return;
		}

		Logger.LogInformation("User created a new account with password.");
		/*
		var userId = await UserManager.GetUserIdAsync(user);
	var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
	code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
	var callbackUrl = NavigationManager.GetUriWithQueryParameters(
	NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
	new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

	if (UserManager.Options.SignIn.RequireConfirmedAccount)
	{
	RedirectManager.RedirectTo(
		"Account/RegisterConfirmation",
			new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
			} */

		await SignInManager.SignInAsync(user, isPersistent: false);
		NavigationManager.NavigateTo("/Garden");
	}

	private ApplicationUser CreateUser()
	{
		try
		{
			return Activator.CreateInstance<ApplicationUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
				$"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private IUserEmailStore<ApplicationUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<ApplicationUser>)UserStore;
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";
	} 
}
